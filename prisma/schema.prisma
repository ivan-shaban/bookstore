// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: check for https://github.com/prisma-utils/prisma-utils/tree/main/libs/prismerge
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token_expires_in Int?
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String           @id @default(cuid())
  firstName     String
  lastName      String
  /// active \ innactive user
  status        UserStatus       @default(ACTIVE)
  email         String           @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  feedbacks     FeedbackEntity[]
}

/// Контакты автора
model AuthorContacts {
  id          String @id @default(cuid())
  telegram    String
  instagram   String
  facebook    String
  vkontakte   String
  twitter     String
  catchphrase String
}

model BookSeries {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  title     String
  books     Book[]
  rating    Float
  feedbacks FeedbackEntity[]
}

// TODO: добавить разные бэйджи, типа НОВОЕ, ВЫБОР ЧИТАТЕЛЕЙ и т.д.
model Book {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  title            String
  rating           Float
  previewImage     String
  shortDescription String
  longDescription  String

  seriesId  String
  series    BookSeries       @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  feedbacks FeedbackEntity[]
}

model FeedbackEntity {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  rating    Float
  title     String
  message   String
  seriesId  String?
  series    BookSeries? @relation(fields: [seriesId], references: [id])
  bookId    String?
  book      Book?       @relation(fields: [bookId], references: [id])
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// сущность новостей
model NewsEntity {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  title        String
  shortTitle   String
  content      String
  previewImage String
}

enum UserStatus {
  ACTIVE
  INNACTIVE
}
