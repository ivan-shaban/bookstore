generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token_expires_in Int?
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String           @id @default(cuid())
  firstName     String
  lastName      String
  /// active \ innactive user
  status        UserStatus       @default(ACTIVE)
  email         String           @unique
  emailVerified DateTime?
  accounts      Account[]
  feedbacks     FeedbackEntity[]
  sessions      Session[]
}

/// Контакты автора
model AuthorContacts {
  id          String @id @default(cuid())
  telegram    String
  instagram   String
  facebook    String
  vkontakte   String
  twitter     String
  catchphrase String
}

model BookSeries {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  title     String
  rating    Float
  books     Book[]
  feedbacks FeedbackEntity[]
}

model Book {
  id               String           @id @default(cuid())
  createdAt        DateTime         @default(now())
  title            String
  rating           Float
  previewImage     String
  shortDescription String
  longDescription  String
  seriesId         String
  series           BookSeries       @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  feedbacks        FeedbackEntity[]
}

model FeedbackEntity {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  rating    Float
  title     String
  message   String
  seriesId  String?
  bookId    String?
  userId    String
  book      Book?       @relation(fields: [bookId], references: [id])
  series    BookSeries? @relation(fields: [seriesId], references: [id])
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// сущность новостей
model NewsEntity {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  title        String
  shortTitle   String
  content      String
  previewImage String
}

enum UserStatus {
  ACTIVE
  INNACTIVE
}
